# Python
__pycache__/
*.py[cod]
*.pyo
*.pyd
.Python
env/
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
site/

# Go
*.a
*.test
*.o
*.exe
*.prof
*.pprof
*.log
*.[568vq]
*.out
*.cover
bin/
pkg/
vendor/
Gopkg.lock
Gopkg.toml

# Docker
Dockerfile.*.bak
.dockerignore
.docker_temp_*
.dockerinit
.dockerenv
.dockerenv.*
.dockerenv*.bak
*.dockerfile
.docker/
.dockerignore
*.dockerfile.*
.docker-compose/
docker-compose*.yml
docker-compose*.yaml
.docker-compose*.yml
.docker-compose*.yaml

# Miscellaneous
.DS_Store
*.swp
*~
.project
.idea/
*.iml
*.suo
*.user
*.sln.docstates
*.pidb
*.dbmdl

# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*
*.terraform.lock.hcl

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc
toolbox/terraform/.terraform.lock.hcl

creds.json
